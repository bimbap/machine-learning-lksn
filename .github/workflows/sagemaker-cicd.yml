name: SageMaker Notebook CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:
  pull_request:
    branches: [ main, master ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

    outputs:
      notebook-instance-name: ${{ steps.create-notebook.outputs.notebook-instance-name }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup AWS CLI
      run: |
        echo "::group::Install/Update AWS CLI"
        # Remove existing installation if it exists
        sudo rm -rf /usr/local/aws-cli /usr/local/bin/aws /usr/local/bin/aws_completer
        
        # Install latest AWS CLI
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip -q awscliv2.zip
        sudo ./aws/install
        rm -rf awscliv2.zip aws/
        aws --version
        echo "::endgroup::"

    - name: Verify AWS Credentials
      run: |
        echo "::group::Verify AWS Access"
        aws sts get-caller-identity
        echo "::endgroup::"

    - name: Create SageMaker Notebook Instance
      id: create-notebook
      run: |
        set -e
        TIMESTAMP=$(date +%Y%m%d%H%M%S)
        INSTANCE_NAME="ml-notebook-$TIMESTAMP"

        echo "::group::Get IAM Role"
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        LAB_ROLE_ARN="arn:aws:iam::${ACCOUNT_ID}:role/LabRole"
        
        if ! aws iam get-role --role-name LabRole >/dev/null 2>&1; then
          echo "::error::LabRole not found in account $ACCOUNT_ID"
          exit 1
        fi
        echo "::endgroup::"

        echo "::group::Create Notebook Instance"
        aws sagemaker create-notebook-instance \
          --notebook-instance-name "$INSTANCE_NAME" \
          --instance-type "ml.t3.medium" \
          --role-arn "$LAB_ROLE_ARN" \
          --volume-size-in-gb 20 \
          --direct-internet-access Enabled
        
        echo "Notebook instance $INSTANCE_NAME created successfully"
        echo "::endgroup::"

        echo "::group::Wait for Notebook to be Ready"
        TIMEOUT=1200
        ELAPSED=0
        
        while true; do
          STATUS=$(aws sagemaker describe-notebook-instance \
            --notebook-instance-name "$INSTANCE_NAME" \
            --query "NotebookInstanceStatus" --output text)
          
          echo "Status: $STATUS ($ELAPSED seconds)"
          
          case "$STATUS" in
            "InService")
              break
              ;;
            "Failed")
              echo "::error::Notebook creation failed"
              aws sagemaker describe-notebook-instance \
                --notebook-instance-name "$INSTANCE_NAME" \
                --query "{Status:NotebookInstanceStatus,Reason:FailureReason}" \
                --output table
              exit 1
              ;;
          esac
          
          if [ $ELAPSED -ge $TIMEOUT ]; then
            echo "::error::Timeout waiting for notebook to start"
            exit 1
          fi
          
          sleep 30
          ELAPSED=$((ELAPSED + 30))
        done
        echo "::endgroup::"

        echo "::group::Notebook Details"
        aws sagemaker describe-notebook-instance \
          --notebook-instance-name "$INSTANCE_NAME" \
          --query "{
            Name:NotebookInstanceName,
            Status:NotebookInstanceStatus,
            InstanceType:InstanceType,
            URL:Url,
            CreationTime:CreationTime,
            RoleArn:RoleArn
          }" \
          --output table
        echo "::endgroup::"

        echo "notebook-instance-name=$INSTANCE_NAME" >> $GITHUB_OUTPUT
        echo "NOTEBOOK_INSTANCE_NAME=$INSTANCE_NAME" >> $GITHUB_ENV

    - name: Execute Post-Creation Setup
      run: |
        echo "::group::Running Post-Creation Setup"
        INSTANCE_NAME="${{ env.NOTEBOOK_INSTANCE_NAME }}"
        
        # Get the notebook instance ID
        INSTANCE_ID=$(aws sagemaker describe-notebook-instance \
          --notebook-instance-name "$INSTANCE_NAME" \
          --query "NotebookInstanceArn" --output text | cut -d'/' -f2)
        
        # Create SSM command document
        cat > setup-command.json << 'EOL'
        {
          "schemaVersion": "2.2",
          "description": "Notebook Setup Commands",
          "parameters": {},
          "mainSteps": [
            {
              "action": "aws:runShellScript",
              "name": "setupScript",
              "inputs": {
                "runCommand": [
                  "#!/bin/bash",
                  "set -e",
                  "echo 'Starting setup...'",
                  "sudo apt-get update -qq",
                  "sudo apt-get install -y git",
                  "REPO_URL='https://github.com/$GITHUB_REPOSITORY.git'",
                  "git clone --depth 1 --branch ${GITHUB_REF##*/} \"$REPO_URL\" /tmp/repo",
                  "if [ -f \"/tmp/repo/machine_learning/script/on-start.sh\" ]; then",
                  "  chmod +x \"/tmp/repo/machine_learning/script/on-start.sh\"",
                  "  /tmp/repo/machine_learning/script/on-start.sh",
                  "fi"
                ]
              }
            }
          ]
        }
        EOL
        
        # Execute the setup
        aws ssm create-document \
          --name "NotebookSetup-$(date +%s)" \
          --content file://setup-command.json \
          --document-type "Command"
        
        aws ssm send-command \
          --instance-ids "$INSTANCE_ID" \
          --document-name "NotebookSetup-$(date +%s)" \
          --cloud-watch-output-config '{"CloudWatchLogGroupName":"/aws/sagemaker/notebook-instances","CloudWatchOutputEnabled":true}'
        
        echo "::endgroup::"

  cleanup:
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
    
    steps:
    - name: Setup AWS CLI
      run: |
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip -q awscliv2.zip
        sudo ./aws/install
        rm -rf awscliv2.zip aws/

    - name: Cleanup Resources
      run: |
        INSTANCE_NAME="${{ needs.deploy.outputs.notebook-instance-name }}"
        
        if [ -n "$INSTANCE_NAME" ]; then
          echo "::group::Cleaning up notebook instance"
          # Stop if running
          aws sagemaker stop-notebook-instance --notebook-instance-name "$INSTANCE_NAME" || true
          
          # Wait for stopped state
          while [ "$(aws sagemaker describe-notebook-instance \
            --notebook-instance-name "$INSTANCE_NAME" \
            --query "NotebookInstanceStatus" --output text 2>/dev/null || echo "NotFound")" != "Stopped" ]; do
            sleep 10
          done
          
          # Delete instance
          aws sagemaker delete-notebook-instance --notebook-instance-name "$INSTANCE_NAME"
          echo "Deleted notebook instance: $INSTANCE_NAME"
          echo "::endgroup::"
        fi