name: SageMaker Notebook CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:
  pull_request:
    branches: [ main, master ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

    outputs:
      notebook-instance-name: ${{ steps.create-notebook.outputs.notebook-instance-name }}
      lifecycle-config-name: ${{ steps.create-notebook.outputs.lifecycle-config-name }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup AWS CLI
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y unzip curl
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip -q awscliv2.zip
        sudo ./aws/install
        rm -rf awscliv2.zip aws/
        aws --version

    - name: Create New SageMaker Notebook Instance
      id: create-notebook
      run: |
        set -e
        TIMESTAMP=$(date +%Y%m%d%H%M%S)
        INSTANCE_NAME="ml-notebook-$TIMESTAMP"

        echo "::group::Get Account ID and Build LabRole ARN"
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        LAB_ROLE_ARN="arn:aws:iam::${ACCOUNT_ID}:role/LabRole"
        
        if ! aws iam get-role --role-name LabRole >/dev/null 2>&1; then
          echo "::error::LabRole not found in account $ACCOUNT_ID"
          exit 1
        fi
        echo "::endgroup::"

        echo "::group::Create Notebook Instance (Without Lifecycle Config)"
        INSTANCE_TYPE="ml.t3.medium"
        VOLUME_SIZE=20
        
        aws sagemaker create-notebook-instance \
          --notebook-instance-name "$INSTANCE_NAME" \
          --instance-type "$INSTANCE_TYPE" \
          --role-arn "$LAB_ROLE_ARN" \
          --volume-size-in-gb $VOLUME_SIZE \
          --direct-internet-access Enabled
        
        echo "✓ Created notebook instance: $INSTANCE_NAME"
        echo "::endgroup::"

        echo "::group::Wait for Notebook Instance to be Ready"
        echo "Waiting for notebook instance to start..."
        
        TIMEOUT=1200
        ELAPSED=0
        
        while true; do
          CURRENT_STATUS=$(aws sagemaker describe-notebook-instance \
            --notebook-instance-name "$INSTANCE_NAME" \
            --query "NotebookInstanceStatus" --output text || echo "Unknown")
          
          case "$CURRENT_STATUS" in
            "InService")
              echo "✓ Notebook instance is ready"
              break
              ;;
            "Failed")
              echo "::error::Notebook instance creation failed"
              aws sagemaker describe-notebook-instance \
                --notebook-instance-name "$INSTANCE_NAME" \
                --query "{Status:NotebookInstanceStatus,Reason:FailureReason}" \
                --output table
              exit 1
              ;;
            *)
              echo "Current status: $CURRENT_STATUS ($ELAPSED seconds)"
          esac
          
          if [ $ELAPSED -ge $TIMEOUT ]; then
            echo "::error::Timeout waiting for notebook to start"
            exit 1
          fi
          
          sleep 30
          ELAPSED=$((ELAPSED + 30))
        done
        echo "::endgroup::"

        echo "::group::Execute Setup Script via SSM"
        # Create a temporary SSM document to run our setup
        cat > setup-document.json << 'EOL'
        {
          "schemaVersion": "2.2",
          "description": "Run notebook setup script",
          "parameters": {},
          "mainSteps": [
            {
              "action": "aws:runShellScript",
              "name": "runSetup",
              "inputs": {
                "runCommand": [
                  "#!/bin/bash",
                  "set -e",
                  "echo 'Starting setup...'",
                  "sudo apt-get update -qq",
                  "sudo apt-get install -y git",
                  "REPO_URL='https://github.com/$GITHUB_REPOSITORY.git'",
                  "git clone --depth 1 --branch ${GITHUB_REF##*/} \"$REPO_URL\" /tmp/repo",
                  "if [ -f \"/tmp/repo/machine_learning/script/on-start.sh\" ]; then",
                  "  chmod +x \"/tmp/repo/machine_learning/script/on-start.sh\"",
                  "  /tmp/repo/machine_learning/script/on-start.sh",
                  "else",
                  "  echo 'Setup script not found'",
                  "fi"
                ]
              }
            }
          ]
        }
        EOL

        # Create and execute the SSM document
        aws ssm create-document \
          --name "NotebookSetup-$TIMESTAMP" \
          --content file://setup-document.json \
          --document-type "Command" \
          --document-format "JSON"
        
        INSTANCE_ID=$(aws sagemaker describe-notebook-instance \
          --notebook-instance-name "$INSTANCE_NAME" \
          --query "NotebookInstanceArn" --output text | cut -d'/' -f2)
        
        aws ssm send-command \
          --instance-ids "$INSTANCE_ID" \
          --document-name "NotebookSetup-$TIMESTAMP" \
          --output-s3-bucket-name "techmart-ml-handi" \
          --output-s3-key-prefix "ssm-logs/"
        
        echo "✓ Setup script execution started via SSM"
        echo "::endgroup::"

        echo "::group::Notebook Instance Details"
        aws sagemaker describe-notebook-instance \
          --notebook-instance-name "$INSTANCE_NAME" \
          --query "{
            Name:NotebookInstanceName,
            Status:NotebookInstanceStatus,
            InstanceType:InstanceType,
            URL:Url,
            CreationTime:CreationTime,
            RoleArn:RoleArn
          }" \
          --output table
        echo "::endgroup::"

        echo "::notice::✅ SageMaker notebook instance created successfully!"
        echo "::notice::Instance Name: $INSTANCE_NAME"
        echo "::notice::IAM Role: $LAB_ROLE_ARN"
        
        echo "NOTEBOOK_INSTANCE_NAME=$INSTANCE_NAME" >> $GITHUB_ENV
        echo "notebook-instance-name=$INSTANCE_NAME" >> $GITHUB_OUTPUT

  cleanup:
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
    
    steps:
    - name: Setup AWS CLI
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y unzip curl
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip -q awscliv2.zip
        sudo ./aws/install
        rm -rf awscliv2.zip aws/
    
    - name: Cleanup Resources
      run: |
        INSTANCE_NAME="${{ needs.deploy.outputs.notebook-instance-name }}"
        
        if [ -n "$INSTANCE_NAME" ] && [ "$INSTANCE_NAME" != "null" ]; then
          echo "Checking notebook instance status: $INSTANCE_NAME"
          STATUS=$(aws sagemaker describe-notebook-instance \
            --notebook-instance-name "$INSTANCE_NAME" \
            --query "NotebookInstanceStatus" --output text 2>/dev/null || echo "NotFound")
          
          if [ "$STATUS" != "NotFound" ]; then
            echo "Current status: $STATUS"
            
            if [ "$STATUS" == "InService" ]; then
              echo "Stopping notebook instance..."
              aws sagemaker stop-notebook-instance --notebook-instance-name "$INSTANCE_NAME"
              
              while [ "$(aws sagemaker describe-notebook-instance \
                --notebook-instance-name "$INSTANCE_NAME" \
                --query "NotebookInstanceStatus" --output text)" != "Stopped" ]; do
                sleep 30
              done
            fi
            
            echo "Deleting notebook instance..."
            aws sagemaker delete-notebook-instance --notebook-instance-name "$INSTANCE_NAME"
            echo "✓ Deleted notebook instance: $INSTANCE_NAME"
          fi
        fi