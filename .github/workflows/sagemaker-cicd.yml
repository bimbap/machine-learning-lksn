name: SageMaker Notebook CI/CD Pipeline

on:
  push:
    branches: [ main, master ]  # Support both main and master
    # Remove path restriction for easier triggering
  workflow_dispatch:
  pull_request:
    branches: [ main, master ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30  # Increased timeout for creation

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

    outputs:
      notebook-instance-name: ${{ steps.create-notebook.outputs.notebook-instance-name }}
      lifecycle-config-name: ${{ steps.create-notebook.outputs.lifecycle-config-name }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Debug - Check File Structure
      run: |
        echo "::group::Repository Structure"
        find . -type f -name "*.ipynb" -o -name "*.sh" -o -name "requirements.txt" | head -20
        echo "::endgroup::"
        
        echo "::group::Check Target Files"
        if [ -f "machine_learning/training.ipynb" ]; then
          echo "✓ training.ipynb found"
        else
          echo "✗ training.ipynb NOT found"
        fi
        
        if [ -f "requirements.txt" ]; then
          echo "✓ requirements.txt found"
        else
          echo "✗ requirements.txt NOT found"
        fi
        
        if [ -f "machine_learning/script/on-start.sh" ]; then
          echo "✓ on-start.sh found"
          echo "Content preview:"
          head -10 "machine_learning/script/on-start.sh"
        else
          echo "✗ on-start.sh NOT found"
        fi
        echo "::endgroup::"

    - name: Setup AWS CLI
      run: |
        set -e
        echo "::group::Update system packages"
        sudo apt-get update -qq
        sudo apt-get install -y unzip curl
        echo "::endgroup::"
        
        echo "::group::Install/Update AWS CLI"
        # Remove any existing AWS CLI installation
        sudo rm -rf /usr/local/aws-cli /usr/local/bin/aws /usr/local/bin/aws_completer 2>/dev/null || true
        
        # Download and install latest AWS CLI
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip -q awscliv2.zip
        sudo ./aws/install
        
        # Clean up
        rm -rf awscliv2.zip aws/
        
        # Verify installation
        aws --version
        echo "::endgroup::"

    - name: Verify AWS Credentials
      run: |
        set -e
        echo "::group::Check AWS Configuration"
        echo "AWS Region: $AWS_DEFAULT_REGION"
        echo "AWS Access Key ID: ${AWS_ACCESS_KEY_ID:0:10}..."
        echo "::endgroup::"
        
        echo "::group::Test AWS Connection"
        aws sts get-caller-identity
        echo "::endgroup::"
        
        echo "::group::List SageMaker Instances"
        aws sagemaker list-notebook-instances --max-items 5
        echo "::endgroup::"

    - name: Create New SageMaker Notebook Instance
      id: create-notebook
      run: |
        set -e
        SCRIPT_PATH="machine_learning/script/on-start.sh"
        TIMESTAMP=$(date +%Y%m%d%H%M%S)
        CONFIG_NAME="notebook-config-$TIMESTAMP"
        INSTANCE_NAME="ml-notebook-$TIMESTAMP"

        echo "::group::Verify Script File"
        if [ ! -f "$SCRIPT_PATH" ]; then
          echo "::error::Script file $SCRIPT_PATH not found"
          echo "::group::Available files in machine_learning/script/"
          ls -la machine_learning/script/ 2>/dev/null || echo "Directory not found"
          echo "::endgroup::"
          exit 1
        fi
        
        echo "Script file found: $SCRIPT_PATH"
        echo "Script size: $(wc -c < $SCRIPT_PATH) bytes"
        echo "::endgroup::"

        echo "::group::Create Lifecycle Configuration"
        cp "$SCRIPT_PATH" lifecycle_script.sh
        chmod +x lifecycle_script.sh
        
        LIFECYCLE_SCRIPT=$(base64 -w 0 lifecycle_script.sh)
        
        aws sagemaker create-notebook-instance-lifecycle-config \
          --notebook-instance-lifecycle-config-name "$CONFIG_NAME" \
          --on-start Content="$LIFECYCLE_SCRIPT"
        
        echo "✓ Created lifecycle config: $CONFIG_NAME"
        echo "::endgroup::"

        echo "::group::Get Account ID and Build LabRole ARN"
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        LAB_ROLE_ARN="arn:aws:iam::${ACCOUNT_ID}:role/LabRole"
        
        echo "Account ID: $ACCOUNT_ID"
        echo "Using LabRole ARN: $LAB_ROLE_ARN"
        
        # Verify the role exists
        if ! aws iam get-role --role-name LabRole >/dev/null 2>&1; then
          echo "::error::LabRole not found in account $ACCOUNT_ID"
          echo "Available roles:"
          aws iam list-roles --query "Roles[].RoleName" --output table
          exit 1
        fi
        
        echo "✓ LabRole found and accessible"
        echo "::endgroup::"

        echo "::group::Create Notebook Instance"
        # Default parameters for the notebook instance
        INSTANCE_TYPE="ml.t3.medium"  # Cost-effective for development
        VOLUME_SIZE=20                # 20GB storage
        
        # Create the notebook instance with LabRole
        aws sagemaker create-notebook-instance \
          --notebook-instance-name "$INSTANCE_NAME" \
          --instance-type "$INSTANCE_TYPE" \
          --role-arn "$LAB_ROLE_ARN" \
          --lifecycle-config-name "$CONFIG_NAME" \
          --volume-size-in-gb $VOLUME_SIZE \
          --direct-internet-access Enabled
        
        echo "✓ Created notebook instance: $INSTANCE_NAME"
        echo "Instance Type: $INSTANCE_TYPE"
        echo "Volume Size: ${VOLUME_SIZE}GB"
        echo "IAM Role: $LAB_ROLE_ARN"
        echo "::endgroup::"

        echo "::group::Wait for Notebook Instance to be Ready"
        echo "Waiting for notebook instance to start..."
        
        # Wait for notebook to be InService
        TIMEOUT=1200  # 20 minutes
        ELAPSED=0
        
        while [ "$(aws sagemaker describe-notebook-instance \
          --notebook-instance-name "$INSTANCE_NAME" \
          --query "NotebookInstanceStatus" --output text)" != "InService" ]; do
          
          if [ $ELAPSED -gt $TIMEOUT ]; then
            echo "::error::Timeout waiting for notebook to start"
            # Show current status for debugging
            aws sagemaker describe-notebook-instance \
              --notebook-instance-name "$INSTANCE_NAME" \
              --query "{Status:NotebookInstanceStatus,Reason:FailureReason}" \
              --output table
            exit 1
          fi
          
          CURRENT_STATUS=$(aws sagemaker describe-notebook-instance \
            --notebook-instance-name "$INSTANCE_NAME" \
            --query "NotebookInstanceStatus" --output text)
          
          echo "Current status: $CURRENT_STATUS ($ELAPSED seconds)"
          
          # Check for failure
          if [ "$CURRENT_STATUS" = "Failed" ]; then
            echo "::error::Notebook instance creation failed"
            aws sagemaker describe-notebook-instance \
              --notebook-instance-name "$INSTANCE_NAME" \
              --query "{Status:NotebookInstanceStatus,Reason:FailureReason}" \
              --output table
            exit 1
          fi
          
          sleep 30
          ELAPSED=$((ELAPSED + 30))
        done
        
        echo "::endgroup::"

        echo "::group::Notebook Instance Details"
        aws sagemaker describe-notebook-instance \
          --notebook-instance-name "$INSTANCE_NAME" \
          --query "{
            Name:NotebookInstanceName,
            Status:NotebookInstanceStatus,
            InstanceType:InstanceType,
            URL:Url,
            CreationTime:CreationTime,
            LifecycleConfig:NotebookInstanceLifecycleConfigName,
            RoleArn:RoleArn
          }" \
          --output table
        echo "::endgroup::"

        echo "::notice::✅ New SageMaker notebook instance created successfully!"
        echo "::notice::Instance Name: $INSTANCE_NAME"
        echo "::notice::Lifecycle Config: $CONFIG_NAME"
        echo "::notice::IAM Role: $LAB_ROLE_ARN"
        
        # Clean up temporary files
        rm -f lifecycle_script.sh
        
        # Export instance name for potential cleanup job
        echo "NOTEBOOK_INSTANCE_NAME=$INSTANCE_NAME" >> $GITHUB_ENV
        echo "LIFECYCLE_CONFIG_NAME=$CONFIG_NAME" >> $GITHUB_ENV
        echo "notebook-instance-name=$INSTANCE_NAME" >> $GITHUB_OUTPUT
        echo "lifecycle-config-name=$CONFIG_NAME" >> $GITHUB_OUTPUT

  # Optional cleanup job - uncomment if you want to auto-delete after some time
  # cleanup:
  #   runs-on: ubuntu-latest
  #   needs: deploy
  #   if: always()  # Run even if deploy fails
  #   
  #   env:
  #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #     AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
  #     AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
  #   
  #   steps:
  #   - name: Setup AWS CLI
  #     run: |
  #       sudo apt-get update -qq
  #       sudo apt-get install -y unzip curl
  #       curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
  #       unzip -q awscliv2.zip
  #       sudo ./aws/install
  #       rm -rf awscliv2.zip aws/
  #   
  #   - name: Wait and Cleanup Resources
  #     run: |
  #       INSTANCE_NAME="${{ needs.deploy.outputs.notebook-instance-name }}"
  #       CONFIG_NAME="${{ needs.deploy.outputs.lifecycle-config-name }}"
  #       
  #       if [ ! -z "$INSTANCE_NAME" ] && [ "$INSTANCE_NAME" != "null" ]; then
  #         echo "Waiting 30 minutes before cleanup..."
  #         sleep 1800  # 30 minutes
  #         
  #         echo "Cleaning up notebook instance: $INSTANCE_NAME"
  #         aws sagemaker stop-notebook-instance --notebook-instance-name "$INSTANCE_NAME" || true
  #         
  #         # Wait for stop
  #         while [ "$(aws sagemaker describe-notebook-instance --notebook-instance-name "$INSTANCE_NAME" --query "NotebookInstanceStatus" --output text 2>/dev/null || echo "NotFound")" != "Stopped" ]; do
  #           sleep 30
  #         done
  #         
  #         aws sagemaker delete-notebook-instance --notebook-instance-name "$INSTANCE_NAME"
  #         echo "Deleted notebook instance: $INSTANCE_NAME"
  #       fi
  #       
  #       if [ ! -z "$CONFIG_NAME" ] && [ "$CONFIG_NAME" != "null" ]; then
  #         echo "Cleaning up lifecycle config: $CONFIG_NAME"
  #         aws sagemaker delete-notebook-instance-lifecycle-config --notebook-instance-lifecycle-config-name "$CONFIG_NAME" || true
  #         echo "Deleted lifecycle config: $CONFIG_NAME"
  #       fi