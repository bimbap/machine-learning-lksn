name: SageMaker Notebook CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:
  pull_request:
    branches: [ main, master ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

    outputs:
      notebook-instance-name: ${{ steps.create-notebook.outputs.notebook-instance-name }}
      lifecycle-config-name: ${{ steps.create-notebook.outputs.lifecycle-config-name }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Debug - Check File Structure
      run: |
        echo "::group::Repository Structure"
        find . -type f -name "*.ipynb" -o -name "*.sh" -o -name "requirements.txt" | head -20
        echo "::endgroup::"
        
        echo "::group::Check Target Files"
        if [ -f "machine_learning/training.ipynb" ]; then
          echo "✓ training.ipynb found"
        else
          echo "✗ training.ipynb NOT found"
        fi
        
        if [ -f "requirements.txt" ]; then
          echo "✓ requirements.txt found"
        else
          echo "✗ requirements.txt NOT found"
        fi
        
        if [ -f "machine_learning/script/on-start.sh" ]; then
          echo "✓ on-start.sh found"
          echo "Content preview:"
          head -10 "machine_learning/script/on-start.sh"
        else
          echo "✗ on-start.sh NOT found"
        fi
        echo "::endgroup::"

    - name: Setup AWS CLI
      run: |
        set -e
        echo "::group::Update system packages"
        sudo apt-get update -qq
        sudo apt-get install -y unzip curl
        echo "::endgroup::"
        
        echo "::group::Install/Update AWS CLI"
        sudo rm -rf /usr/local/aws-cli /usr/local/bin/aws /usr/local/bin/aws_completer 2>/dev/null || true
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip -q awscliv2.zip
        sudo ./aws/install
        rm -rf awscliv2.zip aws/
        aws --version
        echo "::endgroup::"

    - name: Verify AWS Credentials
      run: |
        set -e
        echo "::group::Check AWS Configuration"
        echo "AWS Region: $AWS_DEFAULT_REGION"
        echo "AWS Access Key ID: ${AWS_ACCESS_KEY_ID:0:10}..."
        echo "::endgroup::"
        
        echo "::group::Test AWS Connection"
        aws sts get-caller-identity
        echo "::endgroup::"
        
        echo "::group::List SageMaker Instances"
        aws sagemaker list-notebook-instances --max-items 5
        echo "::endgroup::"

    - name: Create New SageMaker Notebook Instance
      id: create-notebook
      run: |
        set -e
        TIMESTAMP=$(date +%Y%m%d%H%M%S)
        CONFIG_NAME="notebook-config-$TIMESTAMP"
        INSTANCE_NAME="ml-notebook-$TIMESTAMP"

        echo "::group::Create Optimized Lifecycle Configuration"
        # Create a minimal startup script that will:
        # 1. Install basic dependencies
        # 2. Download the full setup script
        # 3. Execute it in the background after notebook starts
        cat > optimized-start.sh << 'EOL'
        #!/bin/bash
        set -e
        
        echo "Starting optimized lifecycle configuration..."
        
        # Install minimal required packages
        sudo apt-get update -qq
        sudo apt-get install -y git awscli unzip
        
        # Download the full setup script from the repository
        REPO_URL="https://github.com/$GITHUB_REPOSITORY.git"
        SETUP_SCRIPT_PATH="machine_learning/script/on-start.sh"
        
        echo "Cloning repository..."
        git clone --depth 1 --branch ${GITHUB_REF##*/} "$REPO_URL" /tmp/repo
        
        if [ -f "/tmp/repo/$SETUP_SCRIPT_PATH" ]; then
          echo "Found setup script, scheduling for execution..."
          # Schedule the full setup to run after notebook starts
          nohup bash -c "sleep 30; /tmp/repo/$SETUP_SCRIPT_PATH" > /var/log/full-setup.log 2>&1 &
          echo "Full setup scheduled to run in background"
        else
          echo "Warning: Full setup script not found at $SETUP_SCRIPT_PATH"
        fi
        
        echo "Optimized lifecycle configuration complete"
        EOL
        
        chmod +x optimized-start.sh
        LIFECYCLE_SCRIPT=$(base64 -w 0 optimized-start.sh)
        
        aws sagemaker create-notebook-instance-lifecycle-config \
          --notebook-instance-lifecycle-config-name "$CONFIG_NAME" \
          --on-start Content="$LIFECYCLE_SCRIPT"
        
        echo "✓ Created optimized lifecycle config: $CONFIG_NAME"
        echo "::endgroup::"

        echo "::group::Get Account ID and Build LabRole ARN"
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        LAB_ROLE_ARN="arn:aws:iam::${ACCOUNT_ID}:role/LabRole"
        
        echo "Account ID: $ACCOUNT_ID"
        echo "Using LabRole ARN: $LAB_ROLE_ARN"
        
        if ! aws iam get-role --role-name LabRole >/dev/null 2>&1; then
          echo "::error::LabRole not found in account $ACCOUNT_ID"
          echo "Available roles:"
          aws iam list-roles --query "Roles[].RoleName" --output table
          exit 1
        fi
        
        echo "✓ LabRole found and accessible"
        echo "::endgroup::"

        echo "::group::Create Notebook Instance"
        INSTANCE_TYPE="ml.t3.medium"
        VOLUME_SIZE=20
        
        aws sagemaker create-notebook-instance \
          --notebook-instance-name "$INSTANCE_NAME" \
          --instance-type "$INSTANCE_TYPE" \
          --role-arn "$LAB_ROLE_ARN" \
          --lifecycle-config-name "$CONFIG_NAME" \
          --volume-size-in-gb $VOLUME_SIZE \
          --direct-internet-access Enabled
        
        echo "✓ Created notebook instance: $INSTANCE_NAME"
        echo "Instance Type: $INSTANCE_TYPE"
        echo "Volume Size: ${VOLUME_SIZE}GB"
        echo "IAM Role: $LAB_ROLE_ARN"
        echo "::endgroup::"

        echo "::group::Wait for Notebook Instance to be Ready"
        echo "Waiting for notebook instance to start..."
        
        TIMEOUT=1200
        ELAPSED=0
        LAST_STATUS=""
        
        while true; do
          CURRENT_STATUS=$(aws sagemaker describe-notebook-instance \
            --notebook-instance-name "$INSTANCE_NAME" \
            --query "NotebookInstanceStatus" --output text || echo "Unknown")
          
          # Only log when status changes
          if [ "$CURRENT_STATUS" != "$LAST_STATUS" ]; then
            echo "Status changed to: $CURRENT_STATUS ($ELAPSED seconds)"
            LAST_STATUS="$CURRENT_STATUS"
          fi
          
          case "$CURRENT_STATUS" in
            "InService")
              echo "✓ Notebook instance is ready"
              break
              ;;
            "Failed")
              echo "::error::Notebook instance creation failed"
              aws sagemaker describe-notebook-instance \
                --notebook-instance-name "$INSTANCE_NAME" \
                --query "{Status:NotebookInstanceStatus,Reason:FailureReason}" \
                --output table
              exit 1
              ;;
            "Unknown")
              echo "::warning::Unable to get notebook status (may be initializing)"
              ;;
          esac
          
          if [ $ELAPSED -ge $TIMEOUT ]; then
            echo "::error::Timeout waiting for notebook to start"
            aws sagemaker describe-notebook-instance \
              --notebook-instance-name "$INSTANCE_NAME" \
              --query "{Status:NotebookInstanceStatus,Reason:FailureReason}" \
              --output table
            exit 1
          fi
          
          sleep 30
          ELAPSED=$((ELAPSED + 30))
        done
        
        echo "::endgroup::"

        echo "::group::Notebook Instance Details"
        aws sagemaker describe-notebook-instance \
          --notebook-instance-name "$INSTANCE_NAME" \
          --query "{
            Name:NotebookInstanceName,
            Status:NotebookInstanceStatus,
            InstanceType:InstanceType,
            URL:Url,
            CreationTime:CreationTime,
            LifecycleConfig:NotebookInstanceLifecycleConfigName,
            RoleArn:RoleArn
          }" \
          --output table
        echo "::endgroup::"

        echo "::notice::✅ SageMaker notebook instance created successfully!"
        echo "::notice::Instance Name: $INSTANCE_NAME"
        echo "::notice::Lifecycle Config: $CONFIG_NAME"
        echo "::notice::IAM Role: $LAB_ROLE_ARN"
        
        echo "NOTEBOOK_INSTANCE_NAME=$INSTANCE_NAME" >> $GITHUB_ENV
        echo "LIFECYCLE_CONFIG_NAME=$CONFIG_NAME" >> $GITHUB_ENV
        echo "notebook-instance-name=$INSTANCE_NAME" >> $GITHUB_OUTPUT
        echo "lifecycle-config-name=$CONFIG_NAME" >> $GITHUB_OUTPUT

  cleanup:
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
    
    steps:
    - name: Setup AWS CLI
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y unzip curl
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip -q awscliv2.zip
        sudo ./aws/install
        rm -rf awscliv2.zip aws/
    
    - name: Cleanup Resources
      run: |
        INSTANCE_NAME="${{ needs.deploy.outputs.notebook-instance-name }}"
        CONFIG_NAME="${{ needs.deploy.outputs.lifecycle-config-name }}"
        
        if [ -n "$INSTANCE_NAME" ] && [ "$INSTANCE_NAME" != "null" ]; then
          echo "Checking notebook instance status: $INSTANCE_NAME"
          STATUS=$(aws sagemaker describe-notebook-instance \
            --notebook-instance-name "$INSTANCE_NAME" \
            --query "NotebookInstanceStatus" --output text 2>/dev/null || echo "NotFound")
          
          if [ "$STATUS" != "NotFound" ]; then
            echo "Current status: $STATUS"
            
            if [ "$STATUS" == "InService" ]; then
              echo "Stopping notebook instance..."
              aws sagemaker stop-notebook-instance --notebook-instance-name "$INSTANCE_NAME"
              
              # Wait for stop
              while [ "$(aws sagemaker describe-notebook-instance \
                --notebook-instance-name "$INSTANCE_NAME" \
                --query "NotebookInstanceStatus" --output text)" != "Stopped" ]; do
                sleep 30
              done
            fi
            
            echo "Deleting notebook instance..."
            aws sagemaker delete-notebook-instance --notebook-instance-name "$INSTANCE_NAME"
            echo "✓ Deleted notebook instance: $INSTANCE_NAME"
          else
            echo "Notebook instance not found or already deleted"
          fi
        fi
        
        if [ -n "$CONFIG_NAME" ] && [ "$CONFIG_NAME" != "null" ]; then
          echo "Deleting lifecycle config: $CONFIG_NAME"
          aws sagemaker delete-notebook-instance-lifecycle-config \
            --notebook-instance-lifecycle-config-name "$CONFIG_NAME" || \
            echo "Lifecycle config not found or already deleted"
          echo "✓ Deleted lifecycle config: $CONFIG_NAME"
        fi